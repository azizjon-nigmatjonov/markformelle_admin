import{b as M,k as h,l as g,r as u,m as L}from"./index-DRACHr32.js";const d=({idForFilter:o})=>{const n=h(),l=g(r=>r.filter.filter),a=u.useMemo(()=>{const r=n.pathname.split("/")[2].length+n.pathname.split("/")[1].length;let e=n.pathname.substring(1,r+2);return o&&(e=e+"/"+o),e},[n,o]);return{filters:u.useMemo(()=>l[a]?l[a]:{},[l[a],a])}},j=({store:o=!1,idForFilter:n="",filterParams:l=[]})=>{const a=M(),i=h(),r=g(t=>t.filter.filter),e=u.useMemo(()=>{const t=i.pathname.split("/")[2].length+i.pathname.split("/")[1].length;let s=i.pathname.substring(1,t+2);return n&&(s=s+"/"+n),s},[i,n]),p=t=>{a(L.setFilterData({pageName:e,filterParams:t}))},b=u.useMemo(()=>r[e]?r[e]:{},[r[e],e]);return{collectFilter:({type:t,val:s,status:D})=>{const c={};if(s){if(D==="arr"){const f=l[t]??[];f.find(m=>m.value===s.value)?c[t]=f.filter(m=>m.value!==s.value):c[t]=[...f,s]}else c[t]=s;o&&p({...l,...c})}},storeFilters:p,filterParams:b}};export{j as F,d as g};
